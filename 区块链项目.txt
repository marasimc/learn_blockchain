区块链技术应用于P2P平台，区块链的特点与P2P有一定的适配性，区块链能够解决现行P2P模式的诸多问题
基于BCOS的贷款抵押平台
PGP算法进行信息的上传及保密
依赖于以太坊上构建智能合约

智能合约solidity编程语言
在以太坊区块链平台

挖矿（工作量证明机制）

智能合约：
以太坊智能合约中的问题包括合约编程Solidity、编译器错误、以太坊虚拟机错误、对区块链网络的攻击、程序错误的不变性以及其他尚无文档记录的攻击。
通过实现一个投票智能合约即电子投票系统，来学习solidity编程语言
https://solidity.readthedocs.io/en/develop/solidity-by-example.html#possible-improvements
解决的主要问题是如何分配合理的权限给正确的人，并且要防止被篡改。这个例子实现了如何去委托投票，整个投票计数过程是自动而且完全透明。


第一个区块链应用：投票系统
三个迭代周期：Vanilla(使用NodeJS进行应用开发)，Truffle（使用去中心化开发框架Truuffle进行开发），Token（引入代币（Token），或者叫通证）

一。
①初识区块链：
在区块链里，多个数据记录组成的批次就被称为块（block），块里的每一行数据记录就被称为交易（transaction）：
最开始的那个块，通常被称为创世块（genesis block），它不指向任何其他块。
不可篡改性：哈希函数，区块链里的每个块都存储有前一个块内容的哈希值，因此如果有任何块的内容被篡改，被篡改的块之后 所有块的哈希值也会随之改变，这样我们就很容易检测出区块链的各块是否被篡改了。
去中心化的挑战：

②C/S架构----以服务器中心
一个典型web应用的服务端通常由 Java，Ruby，Python 等等语言实现。前端代码由 HTML/CSS/JavaScript 实现。 然后将整个应用托管在云端，比如 AWS、Google Cloud Platform、Heroku....，或者放在你租用的一个VPS 主机上。
用户通过客户端（Client）与 web 应用（Server）进行交互
在这种架构中，总是存在一个（或一组）中心化的 web 服务器，所有的客户端都需要 与这一（组）服务器进行交互。当一个客户端向服务器发出请求时，服务器处理该请求，与数据库/缓存进行交互， 读/写/更新数据库，然后向客户端返回响应。

③去中心化架构 —— 彼此平等的节点
每个客户端（浏览器）都是与各自的节点应用实例进行交互，而不是向 一个中心化的服务器请求服务。
去中心化背后的核心思想，就是不依赖于中心化的服务器

④以太坊——世界计算机（ETH）
以太坊是一种区块链的实现。在以太坊网络中，众多的节点彼此连接，构成了以太坊网络：
以太坊节点软件提供两个核心功能：数据存储、合约代码执行。
在每个以太坊全节点中，都保存有完整的区块链数据。以太坊不仅将交易数据保存在链上，编译后 的合约代码同样也保存在链上。
以太坊全节点中，同时还提供了一个虚拟机来执行合约代码。
交易数据：
以太坊中每笔交易都存储在区块链上。当你部署合约时，一次部署就是一笔交易。当你为候选者投票时，一次投票 又是另一笔交易。所有的这些交易都是公开的，每个人都可以看到并进行验证。这个数据永远也无法篡改。
为了确保网络中的所有节点都有着同一份数据拷贝，并且没有向数据库中写入任何无效数据，以太坊 目前使用工作量证明 （POW：Proof Of Work）算法来保证网络安全，即通过矿工挖矿（Mining）来达成共识（Consensus）—— 将数据同步到所有节点。
工作量证明不是达成共识的唯一算法，挖矿也不是区块链的唯一选择。现在，我们只需要了解，共识是指各节点 的数据实现了一致，POW只是众多用于建立共识的算法中的一种，这种算法需要通过矿工的挖矿来实现非可信环境下的 可信交易。共识是目的，POW是手段。
合约代码：
在以太坊上，可以使用Solidity语言来编写业务逻辑/应用代码（也就是合约：Contract）， 然后将合约代码编译为以太坊字节码，并将字节码部署到区块链上：
以太坊虚拟机：
以太坊区块链不仅存储数据和代码，每个节点中还包含一个虚拟机（EVM：Ethereum Virtual Machine）来执行 合约代码 —— 听起来就像计算机操作系统。（以太坊区别于比特币（Bitcoin）的最核心的一点）
JS开发库：
为了便于构建基于web的DApp，以太坊还提供了一个非常方便的JavaScript库web3.js，它封装了以太坊节点的API 协议，从而让开发者可以轻松地连接到区块链节点而不必编写繁琐的RPC协议包
